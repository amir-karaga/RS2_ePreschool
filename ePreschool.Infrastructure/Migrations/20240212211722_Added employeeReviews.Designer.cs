// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ePreschool.Infrastructure;

#nullable disable

namespace ePreschool.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240212211722_Added employeeReviews")]
    partial class AddedemployeeReviews
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ePreschool.Core.Entities.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActiveUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ActivityId")
                        .HasColumnType("integer");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("text");

                    b.Property<string>("ExceptionType")
                        .HasColumnType("text");

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReferrerUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RowId")
                        .HasColumnType("integer");

                    b.Property<string>("TableName")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("WebBrowser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Child", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfEnrollment")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EducatorId")
                        .HasColumnType("integer");

                    b.Property<string>("EmergencyContact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("KindergartenId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("SpecialNeeds")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId");

                    b.HasIndex("KindergartenId");

                    b.HasIndex("ParentId");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abrv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abrv = "MO",
                            CountryId = 1,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Mostar"
                        },
                        new
                        {
                            Id = 2,
                            Abrv = "SA",
                            CountryId = 1,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Sarajevo"
                        },
                        new
                        {
                            Id = 3,
                            Abrv = "JC",
                            CountryId = 1,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Jajce"
                        },
                        new
                        {
                            Id = 4,
                            Abrv = "TZ",
                            CountryId = 1,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tuzla"
                        },
                        new
                        {
                            Id = 5,
                            Abrv = "ZG",
                            CountryId = 2,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Zagreb"
                        });
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Mostar b.b",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "preschool1@gmail.com",
                            IdentificationNumber = "445877566221546464",
                            IsActive = true,
                            IsDeleted = false,
                            LocationId = 2,
                            Name = "Preschool1",
                            PhoneNumber = "38762111222"
                        });
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abrv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abrv = "BiH",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Bosna i Hercegovina"
                        },
                        new
                        {
                            Id = 2,
                            Abrv = "HR",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Hrvatska"
                        },
                        new
                        {
                            Id = 3,
                            Abrv = "SRB",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Srbija"
                        },
                        new
                        {
                            Id = 4,
                            Abrv = "CG",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Crna Gora"
                        },
                        new
                        {
                            Id = 5,
                            Abrv = "MKD",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Makedonija"
                        });
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Biography")
                        .HasColumnType("text");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfEmployment")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DrivingLicence")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("MarriageStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("Pay")
                        .HasColumnType("real");

                    b.Property<int?>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("Qualifications")
                        .HasColumnType("integer");

                    b.Property<bool>("WorkExperience")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Biography = "",
                            CompanyId = 1,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DateOfEmployment = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DrivingLicence = 1,
                            IsDeleted = false,
                            MarriageStatus = 0,
                            Pay = 2000f,
                            Position = 1,
                            Qualifications = 5,
                            WorkExperience = true
                        },
                        new
                        {
                            Id = 3,
                            Biography = "",
                            CompanyId = 1,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DateOfEmployment = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            DrivingLicence = 1,
                            IsDeleted = false,
                            MarriageStatus = 0,
                            Pay = 2000f,
                            Position = 0,
                            Qualifications = 3,
                            WorkExperience = true
                        });
                });

            modelBuilder.Entity("ePreschool.Core.Entities.EmployeeReviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ParentReviewerId")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewComment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReviewRating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ParentReviewerId");

                    b.ToTable("EmployeeReviews");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("RoleLevel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "3f630cca-dc8a-4177-85e1-72ae22233a12",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR",
                            RoleLevel = 0
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "11b59df7-ed61-475e-a293-fc7b0b84bfd0",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "PreschoolOwner",
                            NormalizedName = "PRESCHOOLOWNER",
                            RoleLevel = 1
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "a4c8d1dd-f5c9-44e3-ba8a-c8b7125d4398",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE",
                            RoleLevel = 2
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "9cd41c5f-84fd-4e64-ac70-20cfb7d78c88",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Parent",
                            NormalizedName = "PARENT",
                            RoleLevel = 3
                        });
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("IdentificationNumberCompany")
                        .HasColumnType("text");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPreschoolOwner")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Active = true,
                            ConcurrencyStamp = "0ee5f4c7-f7dd-409d-bfc6-1bb04179ac8a",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "site.admin@epreschool.com",
                            EmailConfirmed = true,
                            IsAdministrator = true,
                            IsDeleted = false,
                            IsEmployee = false,
                            IsParent = false,
                            IsPreschoolOwner = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SITE.ADMIN@EPRESCHOOL.COM",
                            NormalizedUserName = "SITE.ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "38762123456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "site.admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Active = true,
                            ConcurrencyStamp = "40ab6c1a-8fc1-4787-9097-091399c8e8d6",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "preschool.owner@mail.com",
                            EmailConfirmed = true,
                            IsAdministrator = false,
                            IsDeleted = false,
                            IsEmployee = false,
                            IsParent = false,
                            IsPreschoolOwner = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PRESCHOOL.OWNER@MAIL.COM",
                            NormalizedUserName = "PRESCHOOL.OWNER",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "38762123456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "preschool.owner"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Active = true,
                            ConcurrencyStamp = "9372f16f-b808-4247-90dd-aecdfc4d84e5",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "employee@mail.com",
                            EmailConfirmed = true,
                            IsAdministrator = false,
                            IsDeleted = false,
                            IsEmployee = true,
                            IsParent = false,
                            IsPreschoolOwner = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE@MAIL.COM",
                            NormalizedUserName = "EMPLOYEE",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "38762123456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "employee"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Active = true,
                            ConcurrencyStamp = "f21c4aa2-e067-4cd5-b418-2f7942d197e4",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "parent@mail.com",
                            EmailConfirmed = true,
                            IsAdministrator = false,
                            IsDeleted = false,
                            IsEmployee = true,
                            IsParent = false,
                            IsPreschoolOwner = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PARENT@MAIL.COM",
                            NormalizedUserName = "PARENT",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "38762123456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "parent"
                        });
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 4,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ePreschool.Core.Entities.MonthlyPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChildId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("ParentId");

                    b.ToTable("MonthlyPayments");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.New", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Public")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Parent", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmployerAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmployerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmployerPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmployed")
                        .HasColumnType("boolean");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("KindergartenId")
                        .HasColumnType("integer");

                    b.Property<int?>("MarriageStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Qualification")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KindergartenId");

                    b.ToTable("Parents");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            EmployerAddress = "Mostar",
                            EmployerName = "Bingo Mostar",
                            EmployerPhoneNumber = "38763222333",
                            IsDeleted = false,
                            IsEmployed = true,
                            JobDescription = "",
                            KindergartenId = 1,
                            MarriageStatus = 0,
                            Qualification = 5
                        });
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("BirthPlaceId")
                        .HasColumnType("integer");

                    b.Property<string>("Citizenship")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JMBG")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<int?>("PlaceOfResidenceId")
                        .HasColumnType("integer");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePhotoThumbnail")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BirthPlaceId");

                    b.HasIndex("PlaceOfResidenceId");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Mostar",
                            BirthDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            BirthPlaceId = 1,
                            Citizenship = "",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            FirstName = "Site",
                            Gender = 0,
                            IsDeleted = false,
                            JMBG = "123456789",
                            LastName = "Admin",
                            Nationality = "",
                            PostCode = "123"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Mostar",
                            BirthDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            BirthPlaceId = 1,
                            Citizenship = "",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            FirstName = "Preschool",
                            Gender = 0,
                            IsDeleted = false,
                            JMBG = "123456789",
                            LastName = "Owner",
                            Nationality = "",
                            PostCode = "123"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Mostar",
                            BirthDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            BirthPlaceId = 1,
                            Citizenship = "",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            FirstName = "Preschool",
                            Gender = 0,
                            IsDeleted = false,
                            JMBG = "123456789",
                            LastName = "Employee",
                            Nationality = "",
                            PostCode = "123"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Mostar",
                            BirthDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            BirthPlaceId = 1,
                            Citizenship = "",
                            CreatedAt = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            FirstName = "Preschool",
                            Gender = 0,
                            IsDeleted = false,
                            JMBG = "123456789",
                            LastName = "Parent",
                            Nationality = "",
                            PostCode = "123"
                        });
                });

            modelBuilder.Entity("ePreschool.Core.Entities.ActivityLog", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Child", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Employee", "Educator")
                        .WithMany()
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePreschool.Core.Entities.Person", "Person")
                        .WithOne("Child")
                        .HasForeignKey("ePreschool.Core.Entities.Child", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePreschool.Core.Entities.Company", "Kindergarten")
                        .WithMany()
                        .HasForeignKey("KindergartenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePreschool.Core.Entities.Parent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Educator");

                    b.Navigation("Kindergarten");

                    b.Navigation("Parent");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.City", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Company", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.City", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Employee", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePreschool.Core.Entities.Person", "Person")
                        .WithOne("Employee")
                        .HasForeignKey("ePreschool.Core.Entities.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.EmployeeReviews", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePreschool.Core.Entities.Parent", "ParentReviewer")
                        .WithMany()
                        .HasForeignKey("ParentReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ParentReviewer");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUser", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Person", "Person")
                        .WithOne("ApplicationUser")
                        .HasForeignKey("ePreschool.Core.Entities.Identity.ApplicationUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Identity.ApplicationRole", "Role")
                        .WithMany("Roles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePreschool.Core.Entities.Identity.ApplicationUser", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ePreschool.Core.Entities.MonthlyPayment", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePreschool.Core.Entities.Parent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.New", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Parent", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Person", "Person")
                        .WithOne("Parent")
                        .HasForeignKey("ePreschool.Core.Entities.Parent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePreschool.Core.Entities.Company", "Kindergarten")
                        .WithMany()
                        .HasForeignKey("KindergartenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kindergarten");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Person", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.City", "BirthPlace")
                        .WithMany()
                        .HasForeignKey("BirthPlaceId");

                    b.HasOne("ePreschool.Core.Entities.City", "PlaceOfResidence")
                        .WithMany()
                        .HasForeignKey("PlaceOfResidenceId");

                    b.Navigation("BirthPlace");

                    b.Navigation("PlaceOfResidence");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationRole", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Person", b =>
                {
                    b.Navigation("ApplicationUser")
                        .IsRequired();

                    b.Navigation("Child")
                        .IsRequired();

                    b.Navigation("Employee")
                        .IsRequired();

                    b.Navigation("Parent")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
